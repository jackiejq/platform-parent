<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.slljr.finance.front.mapper.UserTradePaymentRecordMapper">
    <resultMap id="BaseResultMap" type="com.slljr.finance.common.pojo.model.UserTradePaymentRecord">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="uid" jdbcType="INTEGER" property="uid" />
        <result column="order_id" jdbcType="VARCHAR" property="orderId" />
        <result column="trade_id" jdbcType="INTEGER" property="tradeId" />
        <result column="type" jdbcType="INTEGER" property="type" />
        <result column="amount" jdbcType="DOUBLE" property="amount" />
        <result column="card_id" jdbcType="INTEGER" property="cardId" />
        <result column="service_charge" jdbcType="DOUBLE" property="serviceCharge" />
        <result column="channel_id" jdbcType="INTEGER" property="channelId" />
        <result column="payment_time" jdbcType="TIMESTAMP" property="paymentTime" />
        <result column="other_params" jdbcType="VARCHAR" property="otherParams" />
       <result column="error_msg" jdbcType="VARCHAR" property="errorMsg" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
        <result column="retry_count" jdbcType="INTEGER" property="retryCount" />
    </resultMap>
      <resultMap id="VoBaseResultMap" type="com.slljr.finance.common.pojo.vo.CompensatoryVO" extends="BaseResultMap">
	    <result column="amount" property="amount"/>
          <result column="surplusAmount" property="surplusAmount"/>
	    <result column="serviceCharge" property="serviceCharge"/>
	    <result column="number" property="number"/>
	    <result column="lastRepaymentDate" property="lastRepaymentDate"/>
	    <result column="cardBalance" property="cardBalance"/>
	    <result column="orderStatus" property="orderStatus"/>
	  </resultMap>
    
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        id, `uid`, order_id,trade_id, `type`, amount, card_id, service_charge, channel_id, payment_time, other_params, error_msg,
        `status`, create_time, update_time,retry_count
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        select
        <include refid="Base_Column_List" />
        from user_trade_payment_record
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        delete from user_trade_payment_record
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.slljr.finance.common.pojo.model.UserTradePaymentRecord" useGeneratedKeys="true">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        insert into user_trade_payment_record (`uid`, order_id,trade_id, `type`,
        amount, card_id, service_charge,
        channel_id, payment_time, other_params, error_msg, `status`,
        create_time, update_time)
        values (#{uid,jdbcType=INTEGER},#{orderId,jdbcType=VARCHAR} , #{tradeId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER},
        #{amount,jdbcType=DOUBLE}, #{cardId,jdbcType=INTEGER}, #{serviceCharge,jdbcType=DOUBLE},
        #{channelId,jdbcType=INTEGER}, #{paymentTime,jdbcType=TIMESTAMP}, #{otherParams,jdbcType=VARCHAR} , #{errorMsg,jdbcType=VARCHAR} , #{errorMsg,jdbcType=VARCHAR}  #{status,jdbcType=INTEGER},
        sysdate(), sysdate())
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.slljr.finance.common.pojo.model.UserTradePaymentRecord" useGeneratedKeys="true">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user_trade_payment_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                `uid`,
            </if>
            <if test="orderId != null">
		        order_id,
		    </if>
            <if test="tradeId != null">
                trade_id,
            </if>
            <if test="type != null">
                `type`,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="cardId != null">
                card_id,
            </if>
            <if test="serviceCharge != null">
                service_charge,
            </if>
            <if test="channelId != null">
                channel_id,
            </if>
            <if test="paymentTime != null">
                payment_time,
            </if>
            <if test="otherParams != null">
                other_params,
            </if>
             <if test="errorMsg != null">
                error_msg,
            </if>
            <if test="status != null">
                `status`,
            </if>
            create_time,
            update_time,
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
		        #{orderId,jdbcType=VARCHAR},
		      </if> 
            <if test="tradeId != null">
                #{tradeId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=DOUBLE},
            </if>
            <if test="cardId != null">
                #{cardId,jdbcType=INTEGER},
            </if>
            <if test="serviceCharge != null">
                #{serviceCharge,jdbcType=DOUBLE},
            </if>
            <if test="channelId != null">
                #{channelId,jdbcType=INTEGER},
            </if>
            <if test="paymentTime != null">
                #{paymentTime,jdbcType=TIMESTAMP},
            </if>
            <if test="otherParams != null">
                #{otherParams,jdbcType=VARCHAR},
            </if>
              <if test="errorMsg != null">
                #{error_msg,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            sysdate(),
            sysdate(),
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.slljr.finance.common.pojo.model.UserTradePaymentRecord">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update user_trade_payment_record
        <set>
            <if test="uid != null">
                `uid` = #{uid,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
		        order_id = #{orderId,jdbcType=VARCHAR},
		      </if>
            <if test="tradeId != null">
                trade_id = #{tradeId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DOUBLE},
            </if>
            <if test="cardId != null">
                card_id = #{cardId,jdbcType=INTEGER},
            </if>
            <if test="serviceCharge != null">
                service_charge = #{serviceCharge,jdbcType=DOUBLE},
            </if>
            <if test="channelId != null">
                channel_id = #{channelId,jdbcType=INTEGER},
            </if>
            <if test="paymentTime != null">
                payment_time = #{paymentTime,jdbcType=TIMESTAMP},
            </if>
            <if test="otherParams != null">
                other_params = #{otherParams,jdbcType=VARCHAR},
            </if>
             <if test="errorMsg != null">
                error_msg = #{errorMsg,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="retryCount != null">
                retry_count = #{retryCount,jdbcType=INTEGER},
            </if>
            update_time = sysdate(),
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByTradeId" parameterType="com.slljr.finance.common.pojo.model.UserTradePaymentRecord">
        update user_trade_payment_record
        <set>
            <if test="uid != null">
                `uid` = #{uid,jdbcType=INTEGER},
            </if>
            <if test="orderId != null">
                order_id = #{orderId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                `type` = #{type,jdbcType=INTEGER},
            </if>
            <if test="amount != null">
                amount = #{amount,jdbcType=DOUBLE},
            </if>
            <if test="cardId != null">
                card_id = #{cardId,jdbcType=INTEGER},
            </if>
            <if test="serviceCharge != null">
                service_charge = #{serviceCharge,jdbcType=DOUBLE},
            </if>
            <if test="channelId != null">
                channel_id = #{channelId,jdbcType=INTEGER},
            </if>
            <if test="paymentTime != null">
                payment_time = #{paymentTime,jdbcType=TIMESTAMP},
            </if>
            <if test="otherParams != null">
                other_params = #{otherParams,jdbcType=VARCHAR},
            </if>
            <if test="errorMsg != null">
                error_msg = #{errorMsg,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            update_time = sysdate(),
        </set>
        where trade_id = #{tradeId,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.slljr.finance.common.pojo.model.UserTradePaymentRecord">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
        -->
        update user_trade_payment_record
        set `uid` = #{uid,jdbcType=INTEGER},
         order_id = #{orderId,jdbcType=VARCHAR},
        trade_id = #{tradeId,jdbcType=INTEGER},
        `type` = #{type,jdbcType=INTEGER},
        amount = #{amount,jdbcType=DOUBLE},
        card_id = #{cardId,jdbcType=INTEGER},
        service_charge = #{serviceCharge,jdbcType=DOUBLE},
        channel_id = #{channelId,jdbcType=INTEGER},
        payment_time = #{paymentTime,jdbcType=TIMESTAMP},
        other_params = #{otherParams,jdbcType=VARCHAR},
        error_msg = #{errorMsg,jdbcType=VARCHAR},
        `status` = #{status,jdbcType=INTEGER},
        update_time = sysdate()
        where id = #{id,jdbcType=INTEGER}
    </update>
	<!-- 本月剩余代偿 -->
      <select id="findSurplusAmount" parameterType="java.lang.Integer" resultType="java.lang.Double">
	    SELECT
			IFNULL(ROUND(sum(payment_amount), 2),0) AS amount
		FROM
			user_trade_order
		WHERE
			type = 1
		AND uid = #{uid,jdbcType=INTEGER}
		AND status IN (- 2 ,- 1, 1)
		AND DATE_FORMAT(create_time, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')        	 
   </select>

    <!--查询累计代偿-->
    <select id="findTotaltCompensationAmount" parameterType="java.lang.Integer" resultType="java.lang.Double">
        SELECT
			IFNULL(ROUND(sum(payment_amount),2),0) AS amount
		FROM
			user_trade_order
		WHERE
			type = 1
		AND uid = #{uid,jdbcType=INTEGER}
		AND `status` = 2			
    </select>
    <!--代偿明细列表-->   
     <select id="queryCompensatoryList"  resultMap="BaseResultMap">
        SELECT			
			 <include refid="Base_Column_List" />
		FROM
			user_trade_payment_record
		WHERE trade_id = #{tradeId,jdbcType=INTEGER} 
		order by id	        
    </select>
    <!--统计代偿明细-->   
     <select id="totalCompensatory"  resultMap="VoBaseResultMap">
        SELECT
			ROUND(IFNULL(uto.payment_amount,0),2) AS amount,
			ROUND(IFNULL(uto.service_charge,0),2) AS serviceCharge,
			count(utpr1.id)                       AS number,
			ROUND(uto.payment_amount - IFNULL(sum(utpr2.amount),0),2)  AS surplusAmount,
			case when utpr.status != 0
            then -1
            else 0 end                            AS isDisplayStopOrder,
            uto.card_last_payment_date            AS lastRepaymentDate,
            uto.card_balance                      AS cardBalance,
            uto.status                            AS orderStatus
		FROM
			user_trade_order uto
			left join user_trade_payment_record utpr on uto.id = utpr.trade_id
			left join user_trade_payment_record utpr1 on utpr.id = utpr1.id AND utpr1.type = 2
			left join user_trade_payment_record utpr2 on utpr.id = utpr2.id AND utpr2.type = 2 AND utpr2.status = 2
		WHERE
			uto.type = 1
		AND uto.id = #{tradeId,jdbcType=INTEGER}
    </select>

<!--auto generated by codehelper on 2018-12-29-->
	<select id="findByTradeIdAndType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id=#{tradeId,jdbcType=INTEGER} and type=#{type,jdbcType=INTEGER}
        order by payment_time asc
    </select>

<!--auto generated by codehelper on 2019-01-01-->
	<insert id="insertList">
        INSERT INTO user_trade_payment_record(
        id,
        uid,
        order_id,
        trade_id,
        type,
        amount,
        card_id,
        service_charge,
        channel_id,
        payment_time,
        other_params,
        error_msg,
        status,
        create_time,
        update_time
        )VALUES
        <foreach collection="list" item="element" index="index" separator=",">
            (
            #{element.id,jdbcType=INTEGER},
            #{element.uid,jdbcType=INTEGER},
            #{element.orderId,jdbcType=VARCHAR},
            #{element.tradeId,jdbcType=INTEGER},
            #{element.type,jdbcType=INTEGER},
            #{element.amount,jdbcType=DOUBLE},
            #{element.cardId,jdbcType=INTEGER},
            #{element.serviceCharge,jdbcType=DOUBLE},
            #{element.channelId,jdbcType=INTEGER},
            #{element.paymentTime,jdbcType=TIMESTAMP},
            #{element.otherParams,jdbcType=VARCHAR},
            #{element.errorMsg,jdbcType=VARCHAR},
            #{element.status,jdbcType=INTEGER},
            #{element.createTime,jdbcType=TIMESTAMP},
            #{element.updateTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

<!--auto generated by codehelper on 2019-01-02-->
	<select id="findByTradeIdAndStatusOrderByIdAsc" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id=#{tradeId,jdbcType=INTEGER} and status=#{status,jdbcType=INTEGER} order by id asc
    </select>

	<select id="queryTotalNum" resultType="java.lang.Integer">
      SELECT COUNT(0) FROM user_trade_payment_record  where type = 2 and trade_id =#{tradeId,jdbcType=INTEGER}
    </select>

<!--auto generated by codehelper on 2019-01-10-->
	<select id="findByTypeAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where type=#{type,jdbcType=INTEGER} and status=#{status,jdbcType=INTEGER}
        ORDER BY payment_time ASC
    </select>

<!--auto generated by codehelper on 2019-01-10-->
	<select id="findByTradeIdAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id=#{tradeId,jdbcType=INTEGER} and status=#{status,jdbcType=INTEGER}
        ORDER BY payment_time ASC
    </select>

<!--auto generated by codehelper on 2019-01-10-->
	<select id="findByTradeIdOrderByPaymentTimeAsc" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id=#{tradeId,jdbcType=INTEGER} order by payment_time asc
    </select>

<!--auto generated by codehelper on 2019-01-11-->
	<update id="updateStatusByTradeId">
        update user_trade_payment_record
        set status=#{updatedStatus,jdbcType=INTEGER}
        where trade_id=#{tradeId,jdbcType=INTEGER}
    </update>

<!--auto generated by codehelper on 2019-01-11-->
	<update id="updateStatusByTradeIdAndType">
        update user_trade_payment_record
        set status=#{updatedStatus,jdbcType=INTEGER}
        where trade_id=#{tradeId,jdbcType=INTEGER} and type=#{type,jdbcType=INTEGER}
    </update>

    <!--auto generated by codehelper on 2019-01-10-->
    <select id="findByOrderId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where order_id=#{orderId,jdbcType=VARCHAR}
    </select>

    <!--auto generated by codehelper on 2019-01-10-->
    <select id="findbyStatusAndType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where
        status=#{status,jdbcType=INTEGER}
        and type = #{type,jdbcType=INTEGER}
        and payment_time &lt;= sysdate()
    </select>

    <select id="findNotSuccessTradePaymentCount" resultType="java.lang.Integer">
        select count(1)
        from (select t.status
              from user_trade_payment_record t
              where t.trade_id = #{tradeId,jdbcType=INTEGER}
              group by t.status) temp
        where temp.status != 2
    </select>

<!--auto generated by codehelper on 2019-01-13-->
	<select id="findByTradeIdOrderByIdAsc" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id=#{tradeId,jdbcType=INTEGER} order by id asc
    </select>

<!--auto generated by codehelper on 2019-01-13-->
	<update id="updateStatusByTradeIdAndUidAndStatus">
        update user_trade_payment_record
        set status=#{updatedStatus,jdbcType=INTEGER}
        where trade_id=#{tradeId,jdbcType=INTEGER} and uid=#{uid,jdbcType=INTEGER} and status=#{status,jdbcType=INTEGER}
    </update>

    <select id="selectCanResetData"  resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>
        from user_trade_payment_record
        where trade_id = #{tradeId,jdbcType=INTEGER}
        AND exists(select 1 from user_trade_payment_record where trade_id = #{tradeId,jdbcType=INTEGER} and status in (-2, -1))
        order by payment_time ASC
    </select>


</mapper>